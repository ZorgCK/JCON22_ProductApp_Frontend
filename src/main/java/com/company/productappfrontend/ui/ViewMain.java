
package com.company.productappfrontend.ui;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Currency;
import java.util.Optional;

import com.company.productappfrontend.dao.DAOProducts;
import com.company.productappfrontend.domain.Category;
import com.company.productappfrontend.domain.Product;
import com.company.productappfrontend.ui.gencols.GenColProductFunctions;
import com.flowingcode.vaadin.addons.ironicons.IronIcons;
import com.rapidclipse.framework.server.data.format.NumberFormatBuilder;
import com.rapidclipse.framework.server.data.renderer.RenderedComponent;
import com.rapidclipse.framework.server.ui.filter.FilterComponent;
import com.rapidclipse.framework.server.ui.filter.GridFilterSubjectFactory;
import com.rapidclipse.framework.server.ui.persistence.PersistFlag;
import com.rapidclipse.framework.server.ui.persistence.PersistValueFlag;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.grid.ColumnTextAlign;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.dnd.GridDropMode;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.renderer.NumberRenderer;
import com.vaadin.flow.router.Route;


@Route("")
public class ViewMain extends VerticalLayout
{
	
	/**
	 *
	 */
	
	public ViewMain()
	{
		super();
		this.initUI();
		
		this.grid.setItemDetailsRenderer(this.createPersonDetailsRenderer());
		this.refreshGrid();
		this.filterComponent.connectWith(this.grid.getDataProvider());
		this.grid.getColumnByKey("unitPrice")
			.setComparator(Comparator.nullsFirst(Comparator.comparing(Product::getUnitPrice)));
	}
	
	private ComponentRenderer<ViewProductDetails, Product> createPersonDetailsRenderer()
	{
		
		return new ComponentRenderer<>(ViewProductDetails::new,
			ViewProductDetails::setProduct);
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #buttonAdd}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void buttonAdd_onClick(final ClickEvent<Button> event)
	{
		final Dialog dialog = new Dialog(new ViewPopupProduct(new Product(), () -> {
			this.refreshGrid();
		}));
		dialog.setWidth("50%");
		dialog.setHeight("27%");
		dialog.open();
	}
	
	public void refreshGrid()
	{
		this.grid.setItems(DAOProducts.listProducts());
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.divHeader        = new Div();
		this.horizontalLayout = new HorizontalLayout();
		this.filterComponent  = new FilterComponent();
		this.buttonAdd        = new Button();
		this.divBody          = new Div();
		this.grid             = new Grid<>(Product.class, false);
		
		this.filterComponent.setId("filterComponent");
		PersistFlag.set(this.filterComponent, true);
		PersistValueFlag.set(this.filterComponent, true);
		this.buttonAdd.setText("add new product");
		this.buttonAdd.setIcon(IronIcons.ADD.create());
		this.grid.setDropMode(GridDropMode.BETWEEN);
		this.grid.setId("grid");
		PersistFlag.set(this.grid, true);
		this.grid.addColumn(Product::getProductUuid).setKey("productUuid").setHeader("ID").setSortable(true);
		this.grid.addColumn(Product::getProductName).setKey("productName").setHeader("Name").setSortable(true);
		this.grid
			.addColumn(v -> Optional.ofNullable(v).map(Product::getCategory).map(Category::getCategoryName).orElse(null))
			.setKey("category.categoryName").setHeader("Category").setSortable(true);
		this.grid.addColumn(Product::getDescription).setKey("description").setHeader("Description").setSortable(true);
		this.grid
			.addColumn(new NumberRenderer<>(Product::getUnitPrice,
				NumberFormatBuilder.Currency().currency(Currency.getInstance("USD")).build(), ""))
			.setKey("unitPrice").setHeader("Unit Price").setSortable(true);
		this.grid.addColumn(Product::getUnitWeight).setKey("unitWeight").setHeader("Unit Weight (kg)").setSortable(true);
		this.grid.addColumn(Product::getUnitsInStock).setKey("unitsInStock").setHeader("Stock").setSortable(true);
		this.grid.addColumn(RenderedComponent.Renderer(GenColProductFunctions::new)).setKey("renderer").setHeader("...")
			.setSortable(false).setAutoWidth(true).setFlexGrow(0).setTextAlign(ColumnTextAlign.CENTER);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		
		this.filterComponent.connectWith(this.grid.getDataProvider());
		this.filterComponent.setFilterSubject(GridFilterSubjectFactory.CreateFilterSubject(this.grid,
			Arrays.asList("category.categoryName", "category.categoryUuid", "description", "imageName", "productName",
				"productUuid"),
			Arrays.asList("category.categoryName", "category.categoryUuid", "description", "productName", "productUuid",
				"unitPrice", "unitWeight", "unitsInStock")));
		
		this.filterComponent.setSizeUndefined();
		this.buttonAdd.setSizeUndefined();
		this.horizontalLayout.add(this.filterComponent, this.buttonAdd);
		this.horizontalLayout.setFlexGrow(1.0, this.filterComponent);
		this.horizontalLayout.setSizeUndefined();
		this.divHeader.add(this.horizontalLayout);
		this.grid.setSizeFull();
		this.divBody.add(this.grid);
		this.divHeader.setWidthFull();
		this.divHeader.setHeight(null);
		this.divBody.setSizeFull();
		this.add(this.divHeader, this.divBody);
		this.setSizeFull();
		
		this.buttonAdd.addClickListener(this::buttonAdd_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private Button           buttonAdd;
	private HorizontalLayout horizontalLayout;
	private Div              divHeader, divBody;
	private FilterComponent  filterComponent;
	private Grid<Product>    grid;
	// </generated-code>
	
}
